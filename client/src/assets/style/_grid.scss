.container {
  margin: 0 auto;
  max-width: var(--grid-max-width);
  padding: 0 calc(var(--grid-gutter) / 2);
  width: 100%;
}

.row {
  display: flex;
  flex-flow: row wrap;
  justify-content: flex-start;
  margin-left: calc(var(--grid-gutter) / -2);
  margin-right: calc(var(--grid-gutter) / -2);
}

.col,
[class*=" col-"],
[class^="col-"] {
  flex: 0 1 100%;
  margin: 0 calc(var(--grid-gutter) / 2) calc(var(--grid-gutter) / 2);
  max-width: 100%;
}

.is-narrow { flex: 0 1; }
.is-reverse-order { flex-direction: row-reverse; }


@mixin col($size) {
  $width: calc((100% / (12 / #{$size})) - var(--grid-gutter));
  flex: 0 0 $width;
  max-width: $width;
}

@media screen and (min-width: 768px) {
  .container { width: 96%; }

  .col { flex: 1; }
  .is-narrow { flex: 0 1; }

  @for $col from 1 through 12 {
    .col-#{$col} {
      @include col($col);
    }
  }

}


// Even grid
.grid {
  display: grid;
  grid-auto-rows: 160px;
  grid-gap: 2px;
  grid-template-columns: repeat(2, 1fr);
}
.grid > * {
  align-items: flex-end;
  background: var(--color-separator) center top;
  background-size: cover;
  color: var(--color-light-primary);
  display: flex;
  padding: 1rem;
}

@media screen and (min-width: 480px) {
  .grid {
    grid-template-columns: repeat(4, 1fr);
  }
}


// Masonry grid
.masonry {
  column-count: 2;
  column-gap: var(--masonry-gap);
  display: flex;

  & > * {
    max-width: 50%;
  }
}

@media screen and (min-width: 480px) {
  .masonry {
    column-count: 3;

    & > * {
      max-width: 33%;
    }
  }
}

@media screen and (min-width: 768px) {
  .masonry {
    column-count: 4;

    & > * {
      max-width: 25%;
    }
  }
}
